/*
 * This source file was generated by the Gradle 'init' task
 */
package edu.wofford;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import java.io.File;

class SudokuTest {

  @Test
  public void testFindBlankTile() {
    boolean ans = true;
    boolean v = true;
    int passes = 0;

    SlidingPuzzle p = new SlidingPuzzle();
    java.awt.Point b = p.findBlankTile();
    v = (b.equals(new java.awt.Point(1, 2)));
    if (v) passes++;
    ans = ans && v;

    int[][] setup1 = {{8, 6, 7}, {5, 3, 2}, {1, 0, 4}};
    p = new SlidingPuzzle(setup1);
    b = p.findBlankTile();
    v = (b.equals(new java.awt.Point(2, 1)));
    if (v) passes++;
    ans = ans && v;

    int[][] setup2 = {{8, 6, 7}, {5, 3, 2}, {1, 9, 4}};
    try {
      p = new SlidingPuzzle(setup2);
      b = p.findBlankTile();
      v = false;
    } catch (RuntimeException e) {
      v = true; passes++;
    }
    ans = ans && v;


    System.out.println("Passes " + passes + " of 3 tests.");
    assertTrue(ans);
  }

  @Test
  public void testGetNeighbor() {
    boolean ans = true;
    boolean v = true;
    int passes = 0;

    SlidingPuzzle.Direction[] dirs = {
      SlidingPuzzle.Direction.N, 
      SlidingPuzzle.Direction.E, 
      SlidingPuzzle.Direction.S, 
      SlidingPuzzle.Direction.W
    };
    SlidingPuzzle p = new SlidingPuzzle();
    for (int i = 0; i < 3; i++) {
      for (int j = 0; j < 3; j++) {
        for (int k = 0; k < 4; k++) {
          int x = i;
          int y = j;
          if (k == 0) x--;
          else if (k == 1) y++;
          else if (k == 2) x++;
          else y--;
          java.awt.Point n = p.getNeighbor(new java.awt.Point(i, j), dirs[k]);
          v = (n.equals(new java.awt.Point(x, y)));
          if (v) passes++;
          ans = ans && v;
        }
      }
    }

    System.out.println("Passes " + passes + " of 36 tests.");
    assertTrue(ans);    
  }

  @Test
  public void testSlide() {
    boolean ans = true;
    boolean v = true;
    int passes = 0;

    int[] expected1 = {8, 6, 0, 5, 3, 7, 1, 2, 4};
    SlidingPuzzle p = new SlidingPuzzle();
    p.slide(SlidingPuzzle.Direction.N);
    int index = 0;
    for (int i = 0; i < 3; i++) {
      for (int j = 0; j < 3; j++) {
        v = (p.getTile(i, j) == expected1[index]);
        if (v) passes++;
        ans = ans && v;
        index++;
      }
    }


    int[] expected2 = {8, 6, 7, 5, 3, 2, 0, 1, 4};
    int[][] setup2 = {{8, 6, 7}, {5, 3, 2}, {1, 0, 4}};
    p = new SlidingPuzzle(setup2);
    p.slide(SlidingPuzzle.Direction.W);
    index = 0;
    for (int i = 0; i < 3; i++) {
      for (int j = 0; j < 3; j++) {
        v = (p.getTile(i, j) == expected2[index]);
        if (v) passes++;
        ans = ans && v;
        index++;
      }
    }


    int[] expected3 = {8, 6, 7, 3, 0, 2, 1, 5, 4};
    int[][] setup3 = {{8, 6, 7}, {0, 3, 2}, {1, 5, 4}};
    p = new SlidingPuzzle(setup3);
    p.slide(SlidingPuzzle.Direction.E);
    index = 0;
    for (int i = 0; i < 3; i++) {
      for (int j = 0; j < 3; j++) {
        v = (p.getTile(i, j) == expected3[index]);
        if (v) passes++;
        ans = ans && v;
        index++;
      }
    }


    int[] expected4 = {6, 8, 7, 3, 0, 2, 1, 5, 4};
    int[][] setup4 = {{6, 0, 7}, {3, 8, 2}, {1, 5, 4}};
    p = new SlidingPuzzle(setup4);
    p.slide(SlidingPuzzle.Direction.S);
    index = 0;
    for (int i = 0; i < 3; i++) {
      for (int j = 0; j < 3; j++) {
        v = (p.getTile(i, j) == expected4[index]);
        if (v) passes++;
        ans = ans && v;
        index++;
      }
    }


    int[] expected5 = {0, 6, 7, 3, 8, 2, 1, 5, 4};
    int[][] setup5 = {{0, 6, 7}, {3, 8, 2}, {1, 5, 4}};
    p = new SlidingPuzzle(setup5);
    p.slide(SlidingPuzzle.Direction.N);
    index = 0;
    for (int i = 0; i < 3; i++) {
      for (int j = 0; j < 3; j++) {
        v = (p.getTile(i, j) == expected5[index]);
        if (v) passes++;
        ans = ans && v;
        index++;
      }
    }
    p.slide(SlidingPuzzle.Direction.W);
    index = 0;
    for (int i = 0; i < 3; i++) {
      for (int j = 0; j < 3; j++) {
        v = (p.getTile(i, j) == expected5[index]);
        if (v) passes++;
        ans = ans && v;
        index++;
      }
    }

    System.out.println("Passes " + passes + " of 54 tests.");
    assertTrue(ans);
  }

  @Test
  public void testIsSolved() {
    boolean ans = true;
    boolean v = true;
    int passes = 0;

    SlidingPuzzle p = new SlidingPuzzle();
    v = !p.isSolved();
    if (v) passes++;
    ans = ans && v;

    int[][] setup2 = {{8, 6, 7}, {5, 3, 2}, {1, 0, 4}};
    p = new SlidingPuzzle(setup2);
    v = !p.isSolved();
    if (v) passes++;
    ans = ans && v;

    int[][] setup3 = {{8, 6, 7}, {0, 3, 2}, {1, 5, 4}};
    p = new SlidingPuzzle(setup3);
    v = !p.isSolved();
    if (v) passes++;
    ans = ans && v;

    int[][] setup4 = {{1, 2, 3}, {4, 5, 6}, {0, 7, 8}};
    p = new SlidingPuzzle(setup4);
    v = !p.isSolved();
    if (v) passes++;
    ans = ans && v;


    int[][] setup5 = {{1, 2, 3}, {4, 5, 6}, {7, 8, 0}};
    p = new SlidingPuzzle(setup5);
    v = p.isSolved();
    if (v) passes++;
    ans = ans && v;

    System.out.println("Passes " + passes + " of 5 tests.");
    assertTrue(ans);
  }

  @Test
  public void testToString() {
    boolean ans = true;
    boolean v = true;
    int passes = 0;

    String expected = "+-----+\n|8|6|7|\n+-----+\n|5|3|2|\n+-----+\n|1| |4|\n+-----+";
    int[][] setup = {{8, 6, 7}, {5, 3, 2}, {1, 0, 4}};
    SlidingPuzzle p = new SlidingPuzzle(setup);
    v = expected.equals(p.toString().trim());
    if (v) passes++;
    ans = ans && v;

    expected = "+-----+\n|8|6|7|\n+-----+\n| |3|2|\n+-----+\n|1|5|4|\n+-----+";
    int[][] setup2 = {{8, 6, 7}, {0, 3, 2}, {1, 5, 4}};
    p = new SlidingPuzzle(setup2);
    v = expected.equals(p.toString().trim());
    if (v) passes++;
    ans = ans && v;

    expected = "+-----+\n|1|6| |\n+-----+\n|2|7|5|\n+-----+\n|8|3|4|\n+-----+";
    int[][] setup3 = {{1, 6, 0}, {2, 7, 5}, {8, 3, 4}};
    p = new SlidingPuzzle(setup3);
    v = expected.equals(p.toString().trim());
    if (v) passes++;
    ans = ans && v;

    expected = "+-----+\n|1|2|3|\n+-----+\n|4|5|6|\n+-----+\n| |7|8|\n+-----+";
    int[][] setup4 = {{1, 2, 3}, {4, 5, 6}, {0, 7, 8}};
    p = new SlidingPuzzle(setup4);
    v = expected.equals(p.toString().trim());
    if (v) passes++;
    ans = ans && v;

    expected = "+-----+\n|1|2|3|\n+-----+\n|4|5|6|\n+-----+\n|7|8| |\n+-----+";
    int[][] setup5 = {{1, 2, 3}, {4, 5, 6}, {7, 8, 0}};
    p = new SlidingPuzzle(setup5);
    v = expected.equals(p.toString().trim());
    if (v) passes++;
    ans = ans && v;

    System.out.println("Passes " + passes + " of 5 tests.");
    assertTrue(ans);
  }

}
