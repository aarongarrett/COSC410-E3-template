/*
 * This source file was generated by the Gradle 'init' task
 */
package edu.wofford;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import java.io.File;

class SudokuTest {

  @Test
  public void testConstructor() {
    String filename = (new File(getClass().getClassLoader().getResource("testboard.txt").getFile())).getAbsolutePath();
    Sudoku sudoku = new Sudoku(filename);
    int[] expected = {3, 2, 1, 2, 1, 1, 2, 0, 0};
    int[][] locs = {{0, 0}, {0, 3}, {1, 2}, {2, 1}, {2, 3}, {3, 0}, {3, 2}, {0, 1}, {2, 2}};
    boolean retval = true;
    int passes = 0;
    for (int i = 0; i < expected.length; i++) {
      boolean ans = (sudoku.getNumber(locs[i][0], locs[i][1]) == expected[i]);
      if (ans) passes++;
      retval = retval && ans;
    }
    System.out.println("Passing " + passes + " of " + expected.length + " tests.");
    assertTrue(retval);
  }


  @Test
  public void testSubsquare00() {
    String filename = (new File(getClass().getClassLoader().getResource("testboard.txt").getFile())).getAbsolutePath();
    Sudoku sudoku = new Sudoku(filename);
    int[][] expected = {{3, 0}, {0, 0}};
    int[][] subsquare = sudoku.getSubsquare(0, 0);
    boolean ans = true;
    for (int i = 0; i < expected.length; i++) {
      ans = ans && (subsquare[i][0] == expected[i][0]) && 
                  (subsquare[i][1] == expected[i][1]);
    }
    assertTrue(ans);
  }

  @Test
  public void testSubsquare01() {
    String filename = (new File(getClass().getClassLoader().getResource("testboard.txt").getFile())).getAbsolutePath();
    Sudoku sudoku = new Sudoku(filename);
    int[][] expected = {{0, 2}, {1, 0}};
    int[][] subsquare = sudoku.getSubsquare(0, 1);
    boolean ans = true;
    for (int i = 0; i < expected.length; i++) {
      ans = ans && (subsquare[i][0] == expected[i][0]) && 
                  (subsquare[i][1] == expected[i][1]);
    }
    assertTrue(ans);
  }

  @Test
  public void testSubsquare10() {
    String filename = (new File(getClass().getClassLoader().getResource("testboard.txt").getFile())).getAbsolutePath();
    Sudoku sudoku = new Sudoku(filename);
    int[][] expected = {{0, 2}, {1, 0}};
    int[][] subsquare = sudoku.getSubsquare(1, 0);
    boolean ans = true;
    for (int i = 0; i < expected.length; i++) {
      ans = ans && (subsquare[i][0] == expected[i][0]) && 
                  (subsquare[i][1] == expected[i][1]);
    }
    assertTrue(ans);
  }

  @Test
  public void testSubsquare11() {
    String filename = (new File(getClass().getClassLoader().getResource("testboard.txt").getFile())).getAbsolutePath();
    Sudoku sudoku = new Sudoku(filename);
    int[][] expected = {{0, 1}, {2, 0}};
    int[][] subsquare = sudoku.getSubsquare(1, 1);
    boolean ans = true;
    for (int i = 0; i < expected.length; i++) {
      ans = ans && (subsquare[i][0] == expected[i][0]) && 
                  (subsquare[i][1] == expected[i][1]);
    }
    assertTrue(ans);
  }

  @Test
  public void testRowSum() {
    String filename = (new File(getClass().getClassLoader().getResource("testboard.txt").getFile())).getAbsolutePath();
    Sudoku sudoku = new Sudoku(filename);
    int[] expected = {5, 1, 3, 3};
    int passes = 0;
    boolean ans = true;
    for (int i = 0; i < expected.length; i++) {
      boolean val = (sudoku.getRowSum(i) == expected[i]);
      if (val) passes++;
      ans = ans && val;
    }
    System.out.println("Passes " + passes + " of " + expected.length + " tests.");
    assertTrue(ans);
  }

  @Test
  public void testColSum() {
    String filename = (new File(getClass().getClassLoader().getResource("testboard.txt").getFile())).getAbsolutePath();
    Sudoku sudoku = new Sudoku(filename);
    int[] expected = {4, 2, 3, 3};
    int passes = 0;
    boolean ans = true;
    for (int i = 0; i < expected.length; i++) {
      boolean val = (sudoku.getColSum(i) == expected[i]);
      if (val) passes++;
      ans = ans && val;
    }
    System.out.println("Passes " + passes + " of " + expected.length + " tests.");
    assertTrue(ans);
  }

  @Test
  public void testIsLegal() {
    String filename = (new File(getClass().getClassLoader().getResource("testboard.txt").getFile())).getAbsolutePath();
    Sudoku sudoku = new Sudoku(filename);
    int[][] ins = {{1, 3, 3}, {1, 3, 2}, {3, 2, 3}, {1, 1, 4}, {1, 1, 3}, {1, 1, 2}, {1, 1, 1}};
    boolean[] expected = {true, false, false, true, false, false, false};
    int passes = 0;
    boolean ans = true;
    for (int i = 0; i < expected.length; i++) {
      boolean val = (sudoku.isLegal(ins[i][0], ins[i][1], ins[i][2]) == expected[i]);
      if (val) passes++;
      ans = ans && val;
    }
    System.out.println("Passes " + passes + " of " + expected.length + " tests.");
    assertTrue(ans);
  }
}
